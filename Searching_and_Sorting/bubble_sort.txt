#include <bits/stdc++.h>
using namespace std;

void BBubble_sort(int vec[])
{
    cout<<" \nBBubble_sort  :";
    int n = sizeof(vec)/sizeof(vec[0]);
    auto b = clock();

    for(int i = 0; i < n-1; i++)
    {
        for(int j = 0; j < n - i - 1; j++)

            if(vec[j] < vec[j - 1])
            {
                int temp = vec[j];
                vec[j] = vec[j - 1];
                vec[j - 1] =  temp;
            }
    }
    auto e = clock();

    cout<<"\nisSorted : "<< is_sorted(vec, vec + n);
    cout<<"\ntotal time taken : "<< (e - b)/CLOCKS_PER_SEC;
}

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

// A function to implement bubble sort
void bubbleSort(int arr[])
{
    cout<<"\n bubbleSort  :";

    int n = sizeof(arr)/sizeof(arr[0]);
    auto b = clock();

    int i, j;
    for (i = 0; i < n-1; i++)

        // Last i elements are already in place
        for (j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1])
                swap(&arr[j], &arr[j+1]);
    auto e = clock();

    cout<<"\nisSorted : "<< is_sorted(arr, arr  + n);
    cout<<"\ntotal time taken : "<<(e - b)/CLOCKS_PER_SEC;
}

int main() {
    vector<int> vec;
    int arr[100000];

    for(int i = 0; i < 100000; i++)
    {
        arr[i] = i;
        vec.push_back(i);
    }
    int j = 0;
    for(int i = 1000; i > 0; i--)
    {
        j++;
        vec[++j] = i;
        arr[j] = i;
    }

    BBubble_sort(arr);
    bubbleSort(arr);
    return 0;
}

