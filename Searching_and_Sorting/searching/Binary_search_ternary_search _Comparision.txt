#include <bits/stdc++.h>
using namespace std;

bool ternary_search(vector<int> vec, int ele)
{
    int n = vec.size();
    int low = 0;
    int high = n - 1;

    while(low <= high)
    {
        int mid1 = low + ((high - low)/3);
        int mid2 = (high - (high - low)/3);

        if(vec[mid1] == ele)
            return true;
        else
            if(vec[mid2] == ele)
                return true;
        else
            if(ele < vec[mid1])
                high = mid1 - 1;
        else
            if(ele > vec[mid1] && ele < vec[mid2])
            {
                low = mid1 + 1;
                high = mid2 - 1;
            }
        else
            if(ele > mid2)
                low = mid2 + 1;
    }
    return false;
}

bool binary_search(vector<int> vec, int ele)
{
    int n = vec.size();
    int low = 0;
    int high = n - 1;

    while(low <= high)
    {
        int mid = (low + high)/2;

        if(vec[mid] == ele)
            return true;
        else
            if(ele < vec[mid])
                high = mid - 1;
        else
            if(ele > vec[mid])
                low = mid + 1;
    }

    return false;
}



int main() {
    vector<int> vec;
    bool temp;

    for(int i = 0;i < 100000; i++)
        vec.push_back(i);

    clock_t beg1 = clock();

    for(int i = 0;i < 100000; i++)
        temp = binary_search(vec, i);

    clock_t end1 = clock();

    clock_t beg2 = clock();

    for(int i = 0;i < 100000; i++)
        temp = ternary_search(vec, i);

    clock_t end2 = clock();


    for(int i = 0;i < 100000; i++)
        if(binary_search(vec, i) != ternary_search(vec, i))
            cout<<" \nwrong for i:"<<i;
        else
            cout<<" \n right for i:"<<i;


    cout<<"\nTime taken by binary_search :"<<end1 - beg1;
    cout<<"\nTime taken by ternary_search :"<<end2 - beg2;

    return 0;
}

